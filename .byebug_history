exit
ride['duration']
exit
ride
exit
@uber_estimate.ride_estimates.first.minimum
@uber_estimate.ride_estimates.first
@uber_estimate.ride_estimates.count
@uber_estimate.ride_estimates
exit
@uber_estimate.ride_estimates.first
@uber_estimate.ride_estimates.each
@uber_estimate.ride_estimates
@uber_estimate.class
@uber_estimate.each
@uber_estimate
@uber_estimates
exit
@uber_estimate.uberx.localized_display_name
@uber_estimate.uberx
@uber_estimate
@uber_estimate.uberx.minimum
@uber_estimate.uberx
exit
build_object(rides.first)
rides.first
rides.count
rides
exit
@uberx.minimum
@uberx
exit
xexir
prices.prices.fifth
prices.prices.fourth
prices.prices.third
prices.prices.second
prices.prices.first
prices.prices
prices.first
prices
exit
a.prices.countexit
a.prices.count
a.prices.first
a.prices
a
exit
build_object(parse(response))
parse(response)
response.body
parse(response.body)
response.body
response
repsonse
build_object(parse(response.body))
build_object(a)
a = JSON.parse(response.body)
JSON.parse(response.body)
response.body
exit
response.body
exit
end_lat
end_lng
start_lng
start_lat
exit
end_lng
end_lat
start_lng
start_lat
exit
response.body
response
exit
start_lat
exit
start_long_and_lat
exit
request
response.body
exit
response.body
response
exit
exi
google_directions.directions_info['end_location']['lat']
google_directions.directions_info['end_location']
google_directions.directions_info.end_location
google_directions.directions_info
google_directions.start_lat
google_directions.start_location
google_directions.class
google_directions
exit
@google_directions['routes']
@google_directions.routes
exit
@google_directions['routes']
@google_directions.routes
@google_directions.attributes
@google_directions.instance_methods
@google_directions.keys
@google_directions
exit
a.html_instructions
a = build_object(directions_info['steps'].first)
a = _
build_object(directions_info['steps'].first)
directions_info['steps'].first
directions_info['steps'].count
directions_info['steps'].class
directions_info['steps']
exit
@google_directions.steps.first['html_instructions']
exit
directions_info['steps'][0]['html_instructions']
directions_info['steps'][0]['distance']['text']
directions_info['steps'][0]['distance']
directions_info['steps'][0]
directions_info['steps'].class
directions_info['steps'].count
directions_info['steps']
exit
@google_directions
exit
params["google_directions"]['d'][1..-1]
params["google_directions"]['d'][0]
params["google_directions"]['d']
params["google_directions"]
params
exit
params[:google_directions].class
params[:google_directions]
params
exit
object.routes[0]['legs'][0]['steps'].first.count
object.routes[0]['legs'][0]['steps'].first.class
object.routes[0]['legs'][0]['steps'].first
object.routes[0]['legs'][0]['steps'].count
object.routes[0]['legs'][0]['steps'].class
object.routes[0]['legs'][0]['steps']
object.routes[0]['legs'][0]['end_address']
object.routes[0]['legs'][0]['start_address']
object.routes[0]['legs'][0]['start_address']['lng']
object.routes[0]['legs'][0]['end_location']['lng']
object.routes[0]['legs'][0]['end_location']
object.routes[0]['legs'][0]['end_location']['lat']
object.routes[0]['legs'][0]['end_location']
object.routes[0]['legs'][0]['location']
object.routes[0]['legs'][0]['end_address']
object.routes[0]['legs'][0]['duration']
object.routes[0]['legs'][0]['distance']
object.routes[0]['legs'][0]['departure_time']
object.routes[0]['legs'][0]['arrival_time']['text']
object.routes[0]['legs'][0]['arrival_time']
object.routes[0]['legs'][0].keys
object.routes[0]['legs'][0].count
object.routes[0]['legs'][0].class
object.routes[0]['legs'][0]
object.routes[0]['legs'].count
object.routes[0]['legs'][1]
object.routes[0]['legs'][0]
object.routes[0]['legs'].class
object.routes[0]['legs']
object.routes[0].keys
object.routes[0]
object.routes.count
object.routes.keys
object.routes
object.status
object.keys
object["routes"].class
object
exit
object["routes"].class
object["routes"].keys
object["routes"]
object["geocoded_waypoints"]
object.keys
object
exit
object.geocoded_waypoints
object.keys
object
exit
object.exit
object.keys
object
exit
response
exit
JSON.parse(response.body).keys
JSON.parse(response.body)
require 'json'
response.body
exit
estimates_params[:origin]
estimates_params
estimate_params
params['origin']
params[:origin]
exit
origin
response.body
response
exit
connection
exit
params
rrparams
exit
auth['omniauth.auth'][:credentials]
auth['omniauth.auth'][:info].keys
auth['omniauth.auth'][:info]
auth['omniauth.auth'][:uid]
auth['omniauth.auth'][:provider]
auth['omniauth.auth'].keys
auth['omniauth.auth']
auth.keys
auth
exit
current_user
exit
session[:user_id]
exit
env['omniauth.auth'][:credentials][:refresh_token]
env['omniauth.auth'][:credentials][:token]
env['omniauth.auth'][:credentials].keys
env['omniauth.auth'][:credentials]
env['omniauth.auth'].keys
env['omniauth.auth'][:extra]
env['omniauth.auth'].keys
env['omniauth.auth']['info'].keys
env['omniauth.auth']['info']['email']
env['omniauth.auth'][:info][:email]
env['omniauth.auth'][:info]
env['omniauth.auth'][:uid]
env['omniauth.auth'][:provider]
env['omniauth.auth'].keys
env['omniauth.auth']
env
exit
exir
env.provider
env.keys
env
exit
request.env['omniauth.auth']
equest.env['omniauth.auth']
request.env
request.evn
exit
eit
provider
